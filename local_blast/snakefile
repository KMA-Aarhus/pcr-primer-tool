import pandas as pd


df = pd.read_csv("input/query.txt", header = None, names = ["Query"])


rule all:
	input: expand(["output/all_alignments_{query_id}.csv"], query_id = list(df.index.values))


rule download_database:
	output: "database/db.fasta"
	conda: "configs/envs/ncbi.yaml"
	script: "scripts/database_download.py"


rule prepare_database:
	input:
		database = "database/db.fasta"
	output:
		temp(touch("prepare_for_blast.done"))
	params:
		database_title = "db"
	conda: "configs/envs/ncbi.yaml"
	shell: """
	# Prepare database for BLAST
	makeblastdb -in {input.database} -dbtype nucl -parse_seqids -out {params.database_title}
	"""


rule create_query_files:
	params:
		seq = lambda wildcards: df.loc[int(wildcards.query_id)].values[0]
	output:
		"input/query_{query_id}.txt"
	shell: """ echo {params.seq} > {output} """


rule blast:
	input: 
		query_seq = "input/query_{query_id}.txt",
		flag = "prepare_for_blast.done"
	output:
		alignment_file = temp("output/alignment_{query_id}.txt"),
		description_file = temp("output/description_{query_id}.tsv")
	params:
		database_title = "db"
	conda: "configs/envs/ncbi.yaml"
	shell: """
	# Use blastn -help for list of BLAST output formats and format specifier options

	# BLAST alignment file
	blastn -query {input.query_seq} -db {params.database_title} -outfmt 3 -line_length 1000 -max_target_seqs 10000 -out {output.alignment_file} 

	# BLAST description. Creates tsv with 3 columns: Subject accession.version, Subject Title & Percentage of identical matches
	blastn -query {input.query_seq} -db {params.database_title} -outfmt "6 saccver stitle pident" -max_target_seqs 10000 -out {output.description_file}

	"""


rule separate_ncbi_file:
	input:
		"output/alignment_{query_id}.txt"
	output:
		alignment = temp("output/alignments_{query_id}.txt"),
		alignment_header = temp("output/alignmentheader_{query_id}.txt")
	shell: """

	# Make alignment file without reference
	# Requires alignment column to be the 3rd column. Requires four dots in the alignment column. 
	awk 'index($3, "....")' {input} > {output.alignment}

	# Make header file for alignment
	awk 'index($1, "Query_")' {input} > {output.alignment_header}

	"""


rule create_csv_files:
	input:
		description = "output/description_{query_id}.tsv",
		alignment = "output/alignments_{query_id}.txt",
		alignment_header = "output/alignmentheader_{query_id}.txt"
	output:
		"output/all_alignments_{query_id}.csv",
		"output/alignments_with_nucleotide_changes_{query_id}.csv",
		"output/nucleotide_changes_table_{query_id}.csv"
	script:
		"scripts/make_csv.py"


onsuccess:
	shell('rm -f db* input/query_*')